application: cain-react-ui

# common settings for all environments
common:
  # Solution stack for elastic beanstalk, default is 64bit tomcat 7 for JAVA app
  solution_stack_name: 64bit Amazon Linux 2015.09 v2.0.6 running Multi-container Docker 1.7.1 (Generic)

  # Tier name for environments. Current supported values are WebServer and Worker
  tier: WebServer

  # AWS region to deploy. Default to us-east-1
  region: ap-southeast-1

  # There are three deployment strategies: 'blue-green', 'blue-only', or 'inplace-update'.
  # Blue green deployments keep two elastic beanstalk environments and always deploy to
  # inactive one, to achieve zero downtime.
  # Blue only deployments do everything that the blue green deployments do except for the final
  # inactive to active CNAME swap leaving the newly deployed application on the inactive
  # "blue" instance.
  # Inplace-update strategy will only keep one environment, and update the version inplace on
  # deploy. Inplace-update will save resources but will suffer from downtime.
  # (All old environments need be destroyed when you switching between strategies.)
  # Default strategy is 'blue-green'.
  strategy: blue-green

  # Name of s3 bucket where uploaded application packages will be stored.
  # Note that the string ".packages" will be added as a suffix to your bucket.
  # So, if "thoughtworks.simple" is passed as the bucket name, the actual s3 bucket
  # name will be thoughtworks.simple.packages. Default to application name.
#   package_bucket:

  # If phoenix mode is turned 'on', it will terminate the old elastic
  # beanstalk environment and recreate a new one on deploy. For blue-green
  # deployment it will terminate the inactive environment first then
  # recreate it. This is useful to avoid configuration drift and
  # accumulating state on the ec2 instances. Also it has the benefit of
  # keeping your ec2 instance system package upto date, because everytime ec2
  # instance boots up from AMI it does a system update. Default is 'off' but we suggest
  # you override it to 'on' for production environment.
  phoenix_mode: false

  # The tags you would like to be associated with your resources.
  # These tags will only be used when you first launch an environment.  If you are using
  # phoenix_mode set as true each time you deploy you will get a new environment and therefore
  # any changes to your tags.  If phoenix_mode is false then it will only use your tags on the
  # initial deploy.
  tags:
    Name: cain-react-ui
    Stream: Cain
    Project: Cain
    Owner: Cain

  # Specifies the maximum number of versions to keep. Older versions are removed
  # and deleted from the S3 source bucket as well. If specified as zero or not
  # specified, all versions will be kept.  If a version_prefix is given, only removes
  # version starting with the prefix....
  keep_latest: 5

  # Specifies a prefix to prepend to the version label.
  # This can be useful if you want to use different binaries for different
  # environments.
  version_prefix: "cain-react-ui-"

  # Generating version label for package to be deployed. A readable version label will
  # provide better traceablity of your deployment process.
  # By default setting is:
  # version_label: <%= package_digest %>
  # which means using MD5 digest of the package file. If you deploy using build
  # pipeline tool such as GO, switching to pipline counter is highly suggested to
  # increase the readability. Following example will read pipeline counter from environment
  # variable with a fall back to digest for local deployment:
  version_label: <%= ENV['BUILD_NUMBER'] || package_digest %>


  # Smoke test value should be a piece of ruby code with access to single variable
  # "host_name" -- environment DNS name. Smoke test snippet will be evaluated at
  # the end of the deployment for inplace-update deployment. For blue-green
  # deployment it will run after inactive environment update is completed and before
  # switching over.
  # Defining a smoke test is highly recommended for serious usage. By default we use
  # The simplest one that just be checking server landing page using curl, e.g.
  smoke_test: |
    curl_http_code = "curl -s -o /dev/null -w \"%{http_code}\" http://#{host_name}/_healthcheck"
    Timeout.timeout(600) do
      until ['200', '301', '302'].include?(`#{curl_http_code}`.strip)
        sleep 5
      end
    end

    #Timeout::timeout(180) {
    #  #Smoke tests here: Exit with a zero exit-code on success only.
    #  #This will loop until it succeeds or times out
    #  `./smoketest.sh`
    #  if $?.exitstatus == 0
    #    raise "smoke tests failed!"
    #  end
    #}


  # Elastic Beanstalk settings that will apply to the environments you are
  # deploying.
  # For all available options take a look at
  # http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html
  option_settings:
    # Following is an example of set EC2 ssh key name. This allow you ssh into the ec2
    # instance. See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
    - namespace: aws:autoscaling:launchconfiguration
      option_name: EC2KeyName
      value: UGC-CAIN-EC2-SG

    # Following is an example which changes EC2 instance type
    # from t1.micro (default) to m1.small. Instances with t1.micro type sometime
    # are not very responsible, so m1.small is suggested for saving time.
    # But if you care about the marginal cost difference you can comment this out to
    # go back to t1.micro.

    - namespace: aws:autoscaling:launchconfiguration
      option_name: InstanceType
      value: t1.micro

    - namespace: aws:elasticbeanstalk:application
      option_name: Application Healthcheck URL
      value: "/_healthcheck"

    - namespace: aws:elasticbeanstalk:healthreporting:system
      option_name: SystemType
      value: "enhanced"

    - namespace: aws:ec2:vpc
      option_name: ELBScheme
      value: "external"

    - namespace: aws:ec2:vpc
      option_name: AssociatePublicIpAddress
      value: "true"

    - namespace: aws:elasticbeanstalk:environment
      option_name: ServiceRole
      value: aws-elasticbeanstalk-service-role

    - namespace: aws:elasticbeanstalk:application:environment
      option_name: LogFileName
      value: "/var/log/cain-react-ui.json"

    - namespace: aws:elasticbeanstalk:application:environment
      option_name: LogLevel
      value: "info"

    # The cooldown value should always be greater than the HealthCheckGracePeriod of ASG
    - namespace: aws:autoscaling:asg
      option_name: Cooldown
      value: '600'

  # If resources specified, eb_deployer will use the CloudFormation
  # template you provide to create a default CloudFormation stack with
  # name <application_name>-<env-name> for the environment current
  # deploying. And Outputs of the CloudFormation can be mapped to Elastic Beanstalk
  # options settings.
  # keys:
  #    template => CloudFormation template file with JSON format
  #    inputs => A Hash, input values for the CloudFormation template
  #    outputs => A Hash with key map to your CloudFormation template outputs and value as elastic beanstalk settings namespace and option_name.
  #    capabilities => An array. You need set it to ['CAPABILITY_IAM'] if the
  # template include IAM Instance Profile.
  resources:

    template: config/web-stack.json
    outputs:
      InstanceProfile:
        namespace: aws:autoscaling:launchconfiguration
        option_name: IamInstanceProfile
    capabilities: ['CAPABILITY_IAM']

# You can define environment here. Each environment can overriden any common settings
environments:
  dev:
    package_bucket: "cain-react-ui-dev"

    option_settings:
      - namespace: aws:ec2:vpc
        option_name: VPCId
        value: vpc-6968970c

      - namespace: aws:ec2:vpc
        option_name: Subnets
        value: "subnet-bc6791cb"

      - namespace: aws:ec2:vpc
        option_name: ELBSubnets
        value: "subnet-bc6791cb"

      - namespace: aws:elasticbeanstalk:application:environment
        option_name: StatsDHost
        value: "statsd.dev.aws.seekprod.local"

      - namespace: aws:elasticbeanstalk:application:environment
        option_name: NODE_ENV
        value: "development"

      - namespace: aws:elasticbeanstalk:application:environment
        option_name: HostName
        value: "http://cain-react-ui-dev.elasticbeanstalk.com"

  prod:
    package_bucket: "cain-react-ui-prod"

    option_settings:
      - namespace: aws:ec2:vpc
        option_name: VPCId
        value: vpc-6968970c

      - namespace: aws:ec2:vpc
        option_name: Subnets
        value: "subnet-bc6791cb"

      - namespace: aws:ec2:vpc
        option_name: ELBSubnets
        value: "subnet-bc6791cb"

      - namespace: aws:elasticbeanstalk:application:environment
        option_name: StatsDHost
        value: "statsd.prod.aws.seekprod.local"

      - namespace: aws:elasticbeanstalk:application:environment
        option_name: NODE_ENV
        value: "production"

      - namespace: aws:elb:loadbalancer
        option_name: CrossZone
        value: "true"

      - namespace: aws:autoscaling:asg
        option_name: Availability Zones
        value: "Any"

      - namespace: aws:autoscaling:asg
        option_name: MinSize
        value: "1"

      - namespace: aws:autoscaling:asg
        option_name: MaxSize
        value: "20"

      - namespace: aws:elasticbeanstalk:application:environment
        option_name: HostName
        value: "http://cain-react-ui-prod.elasticbeanstalk.com"

      - namespace: aws:elasticbeanstalk:application:environment
        option_name: RAYGUN_API_KEY
        option_name: RaygunApiKey
        value: ""

    inactive_settings:
      - namespace: aws:autoscaling:asg
        option_name: Availability Zones
        value: "Any"

      - namespace: aws:autoscaling:asg
        option_name: MinSize
        value: "1"
